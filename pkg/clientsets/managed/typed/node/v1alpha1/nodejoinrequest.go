/**
 * Copyright 2020 Rafael Fernández López <ereslibre@ereslibre.es>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1alpha1 "github.com/oneinfra/oneinfra/apis/node/v1alpha1"
	scheme "github.com/oneinfra/oneinfra/pkg/clientsets/managed/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// NodeJoinRequestsGetter has a method to return a NodeJoinRequestInterface.
// A group's client should implement this interface.
type NodeJoinRequestsGetter interface {
	NodeJoinRequests() NodeJoinRequestInterface
}

// NodeJoinRequestInterface has methods to work with NodeJoinRequest resources.
type NodeJoinRequestInterface interface {
	Create(*v1alpha1.NodeJoinRequest) (*v1alpha1.NodeJoinRequest, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.NodeJoinRequest, error)
	List(opts v1.ListOptions) (*v1alpha1.NodeJoinRequestList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	NodeJoinRequestExpansion
}

// nodeJoinRequests implements NodeJoinRequestInterface
type nodeJoinRequests struct {
	client rest.Interface
}

// newNodeJoinRequests returns a NodeJoinRequests
func newNodeJoinRequests(c *NodeV1alpha1Client) *nodeJoinRequests {
	return &nodeJoinRequests{
		client: c.RESTClient(),
	}
}

// Get takes name of the nodeJoinRequest, and returns the corresponding nodeJoinRequest object, and an error if there is any.
func (c *nodeJoinRequests) Get(name string, options v1.GetOptions) (result *v1alpha1.NodeJoinRequest, err error) {
	result = &v1alpha1.NodeJoinRequest{}
	err = c.client.Get().
		Resource("nodejoinrequests").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of NodeJoinRequests that match those selectors.
func (c *nodeJoinRequests) List(opts v1.ListOptions) (result *v1alpha1.NodeJoinRequestList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.NodeJoinRequestList{}
	err = c.client.Get().
		Resource("nodejoinrequests").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested nodeJoinRequests.
func (c *nodeJoinRequests) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("nodejoinrequests").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a nodeJoinRequest and creates it.  Returns the server's representation of the nodeJoinRequest, and an error, if there is any.
func (c *nodeJoinRequests) Create(nodeJoinRequest *v1alpha1.NodeJoinRequest) (result *v1alpha1.NodeJoinRequest, err error) {
	result = &v1alpha1.NodeJoinRequest{}
	err = c.client.Post().
		Resource("nodejoinrequests").
		Body(nodeJoinRequest).
		Do().
		Into(result)
	return
}

// Delete takes name of the nodeJoinRequest and deletes it. Returns an error if one occurs.
func (c *nodeJoinRequests) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("nodejoinrequests").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *nodeJoinRequests) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("nodejoinrequests").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}
